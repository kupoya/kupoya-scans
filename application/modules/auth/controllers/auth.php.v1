<?php 

class Auth extends MY_Controller {
	
	
	public function __construct() {
		
		parent::__construct();

		$this->load->model('brand_model');
		$this->load->model('code_model');
		$this->load->model('strategy_model');
		//$this->load->model('product_model');
		
		//$this->load->model('user_model');
		$this->load->library('security');
		$this->load->helper('security');
		
		$this->load->library('FBConnect');
	}
	
	
	
	
	
	public function invalid() {
		
		$data = array();
		//$this->load->view('coupon_invalid', $data);
		$this->template->build('coupon/coupon_invalid', $data);
		
	}
	
	
	
	public function index($brand_id = 0, $code_id = 0)
	{
		
		if (!$brand_id === 0 || $code_id === 0)
			redirect('auth/invalid');
		
		$brand_id = xss_clean($brand_id);
		$code_id = xss_clean($code_id);
		
log_message('debug', ' === brand_id: '.$brand_id);
log_message('debug', ' === code_id: '.$code_id);
// check for given brandId and productId
/*
if (!$brandId || !$productId) {
	log_message('debug', ' === invalid 1');
	redirect('auth/invalid');
}
*/

		// initialize template data variable
		$data = array();
		
		$campaign_id = $this->code_model->get_campaign_by_brand_code($brand_id, $code_id);
		if (!$campaign_id) {
			log_message('debug', ' === invalid campaign_id: '.$campaign_id);
			redirect('auth/invalid');
		}

		
		$this->session->set_userdata('code_id', $code_id);
		$this->session->set_userdata('campaign_id', $campaign_id);
		
		// if we got the brand and code ok, let's pull up brand information
		$brand_info = $this->brand_model->get_brand_info($brand_id);
		// push brand info into session for other pages
		if ($brand_info) { 
			$this->session->set_userdata('brand', $brand_info);
		}
			
		
		$strategy_info = $this->strategy_model->get_strategy_by_campaign($campaign_id);
		if ($strategy_info === false) {
			log_message('debug', ' === invalid strategy_info: '.$strategy_info);
			redirect('auth/invalid');
		}
		
		$this->session->set_userdata('strategy', $strategy_info);
log_message('debug', ' === strategy_info: '.$strategy_info['id']);
		
		// create nextUrl string for facebook redirect after successful authentication.
		// this is done based on session data where these values were saved when the user
		// attempted accessing the app without authenticating first

		//$nextUrl = site_url("coupon/index/$brandId/$productId");
		//$nextUrl = site_url("auth/login/$brand_info/$code_id");
		$nextUrl = site_url("auth/login");
//log_message('debug', ' === 3');
		$this->fbconnect->urlNext = $nextUrl; 
		$fbLoginUrl = $this->fbconnect->getLoginUrl();
		
//log_message('debug', ' === 4');
		$data['facebook'] = array(
			'app_id'		=> $this->fbconnect->getAppId(),
			'perms'			=> $this->fbconnect->config['req_perms'],
			'display'		=> 'touch',
			'nextUrl'		=> $nextUrl,
			//'session'		=> $this->fbconnect->getSession(),
			//'user'			=> $this->fbconnect->user,
			'loginUrl'		=> $fbLoginUrl,
		);
				
		// add the brand information to the view variables 
		$data['brand'] = $brand_info;
		$data['strategy'] = $strategy_info;
		
		log_message('debug', ' === 6');
		$this->template->build('auth/login', $data);
		
	}
	
	
	
	
	/**
	 * User registers for the first time at Kupoya's.
	 * Save user information in the database
	 */
	public function _register() {
		
		$this->load->model('user_model');
		
		$user_info = $this->fbconnect->user;
		
		// get user's friends count
		$user_friends = $this->fbconnect->api('me/friends', 'GET');
		
        $user_info['auth_provider'] = 'facebook';
        $user_info['friends_count'] = count($user_friends['data']);

		// data ready, try to create the new user
		$user = $this->user_model->create_user($user_info);
		if (!$user)
			return false;
		
		// push user info into session
		$this->session->set_userdata('user', $user);
		
		return true;
		

	}
	
	
	
	public function login() {

		$brand = $this->session->userdata('brand');
		$code_id = $this->session->userdata('code_id');
		$strategy = $this->session->userdata('strategy');
		
log_message('debug', ' === brand_id: '.$brand['id']);
log_message('debug', ' === code_id: '.$code_id);
log_message('debug', ' === strategy id: '.$strategy['id']);

		if (!$brand['id'] || !$code_id)
			redirect('auth/invalid');
		
		$ret = $this->_doLogin();
		if ($ret === true) {
			//$brandId = $this->session->userdata('brandId');
			//$productId = $this->session->userdata('productId');
			
			// set user as logged in
			$this->session->set_userdata(array('logged_in' => '1'));

			// forward to the coupon page of this brand and product
			$strategy_type = $strategy['type'];
			if (!$strategy_type) {
				log_message('debug', ' === no strategy type defined: '.$strategy['type']);
				redirect('auth/invalid');
			}
			redirect($strategy_type.'/index');
			
		} else {
			redirect('auth/invalid');
		}
	}
	
	
	
	public function _doLogin() {
				
		$this->load->model('user_model');
		
		if(!$this->fbconnect->getSession()) {
			//if no session is available the login is invalid
log_message('debug', ' === no session found');
			return false;
			
   		} else {
   			log_message('debug', ' === user found');
			$fb_uid = $this->fbconnect->user_id;
			$fb_usr = $this->fbconnect->user;
   
			if ($fb_uid) {

				// if fb_uid is valid, we check if the user exists in the database 
				$user = $this->user_model->get_user_by_authprovider_uid($fb_uid, 'facebook');
   
log_message('debug', ' === user returned: '.$user);
				// something bad happened
				if ($user === -1) {
					log_message('debug', ' === login: -1');
					return false;
				}
				
   				if (is_array($user)) {
   				//if ($user === true) {
 					// user exists
 					// let's set session data for use in our application
					// push into session
					$this->session->set_userdata('user', $user);   					
log_message('debug', ' === login: true');
					return true;

   				} else {
log_message('debug', ' === login: false');
					// user doesn't exist so let's create it
					return $this->_register();
					
				}
			} else {
				//no user id? odd, redirect to index page
				return false;

			}
				
		}
		
	}
	
	
	
	public function logout() {
		
		
		// set nextUrl to index/welcome/invalid page..
		$nextUrl = site_url("auth/invalid");
		$params = array('next' => $nextUrl);
		
		// get facebook api logout link
		$fbLogoutUrl = $this->fbconnect->getLogoutUrl($params);
		
		// destroy any session parameters
		// @TODO is this really required??!
		$this->session->sess_destroy();
		
		// redirect the user to the logout
		redirect($fbLogoutUrl);
		
		
	}
	
	
	
}